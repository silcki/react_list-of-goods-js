{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_NAME","SORT_FIELD_LENGTH","App","sorted","useState","sortField","setSortField","isSorted","setSorted","makeSetSortField","field","showGoods","goods","localGoods","sort","good1","good2","localeCompare","length","reverse","sortGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAkB,OAClBC,EAAoB,SA2BnB,IAAMC,EAAM,WACjB,IAIsBC,EAJtB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAmB,SAAAC,GAAK,OAAI,kBAAMJ,EAAaI,KAG/CC,EAhCR,SAAmBC,EAAnB,GAAoD,IAAxBP,EAAuB,EAAvBA,UAAWE,EAAY,EAAZA,SAC/BM,EAAU,YAAOD,GAqBvB,OAnBIP,GACFQ,EAAWC,MAAK,SAACC,EAAOC,GACtB,OAAQX,GACN,KAAKL,EACH,OAAOe,EAAME,cAAcD,GAE7B,KAAKf,EACH,OAAOc,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXX,GACFM,EAAWM,UAGNN,EAUWO,CAChBrB,EACA,CAAEM,YAAWE,aAQf,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,CAAC,SAAU,WACX,CAAE,WAAYlB,IAAcL,IAE9BwB,QAASf,EAAiBT,GAN5B,iCAWA,wBACEsB,KAAK,SACLD,UAAWE,IACT,CAAC,SAAU,cACX,CAAE,WAAYlB,IAAcJ,IAE9BuB,QAASf,EAAiBR,GAN5B,4BAWA,wBACEqB,KAAK,SACLD,UAAWE,IACT,CAAC,SAAU,cACX,CACE,YAAahB,IAGjBiB,SA7CcrB,GA6CUI,EA7CA,kBAAMC,EAAUL,KAqC1C,sBAaEE,GAAaE,IACb,wBACEe,KAAK,SACLD,UAAU,4BACVG,QA/CI,WACZlB,EAAa,IACbE,GAAU,IA0CJ,sBAUJ,6BACGG,EAAUc,KAAI,SAAAC,GAAI,OACjB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC/GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9b5fe9a8.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction sortGoods(goods, { sortField, isSorted }) {\n  const localGoods = [...goods];\n\n  if (sortField) {\n    localGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isSorted) {\n    localGoods.reverse();\n  }\n\n  return localGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isSorted, setSorted] = useState(false);\n\n  const makeSetSortField = field => () => setSortField(field);\n  const makeSetSorted = sorted => () => setSorted(sorted);\n\n  const showGoods = sortGoods(\n    goodsFromServer,\n    { sortField, isSorted },\n  );\n\n  const reset = () => {\n    setSortField('');\n    setSorted(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            ['button', 'is-info'],\n            { 'is-light': sortField !== SORT_FIELD_NAME },\n          )}\n          onClick={makeSetSortField(SORT_FIELD_NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            ['button', 'is-success'],\n            { 'is-light': sortField !== SORT_FIELD_LENGTH },\n          )}\n          onClick={makeSetSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            ['button', 'is-warning'],\n            {\n              'is-light': !isSorted,\n            },\n          )}\n          onClick={makeSetSorted(!isSorted)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isSorted) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {showGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}